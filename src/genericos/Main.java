package genericos;

import genericos.logica.Caja;

public class Main {
    public static void main(String[] args) {

        // GUARDAR STRINGS EN CAJA, dentro de las <> se coloca el tipo de dato que se quiere guardar
        Caja<String> cajaString = new Caja<>();
        cajaString.ponerAlgo("HOLA MUNDO UWU");
        String contenido = cajaString.obtenerAlgo();

        System.out.println("El contenido de la caja de Strings es: " + contenido);

        // GUARDAR ENTEROS EN CAJA
        Caja<Integer> cajaEnteros = new Caja<>();
        cajaEnteros.ponerAlgo(27);
        int contenidoEntero = cajaEnteros.obtenerAlgo();

        System.out.println("El contenido de la caja de Enteros es: " + contenidoEntero);

    }
}
/*
HAY SITUACIONES DONDE QUEREMOS REUTILIZAR UNA MISNMA FUNCION O METODO, PERO CAMBIAR EL TIPO DE DATO QUE RECIBIREMOS, POR ESO EXISTEN GENERICOS

LOS GENERICOS SON UNA CARACTERISTICA QUE PERMITE DEFINIR CLASES, INTERFACES Y METODOS CON TIPOS DE DATOS PARAMETRIZADOS
ES DECIR, QUE SE PUEDEN UTILIZAR CON DIFERENTES TIPOS DE DATOS

SU OBJETIVO PRINCIPAL ES PROPORCIONAR UNA MANERA DE MANEJAR OBJETOS DE DIFERESNTES TIPOS SIN PERDER LA SEGURIDAD DE TIPO

VENTAJA = ELIMINACION DEL CASTEO EXPLICITO (CONVERSION DE UN TIPO DE DATO A OTRO)

LOS GENERICOS SE IMPLEMENTAN CON ANGULOS <>, Y CON UNA LETRA MAYUSCULA, POR EJEMPLO T

LOS GENERICOS TRABAJAN CON DATOS PRIMITIVOS, POR ENDE SE USAN LAS CLASES WRAPPER, POR EJEMPLO Integer, Double, Float, String, etc

SE PUEDE UTILIZAR LA MISMA CLASE, MANDANDO DISTINTOS TIPOS DE DATOS, Y EL METODO FUNCIONA IGUALMENTE SIN PROBLEMAS POR DECLARARSE COMO GENERICO EL PARAMETRO Y LA DEVOLUCION, ADMITIENDO CUALQUIER TIPO DE DATO QUE SE LE PASE

TABLA DE GENERICOS (SE SUELE GENERALIZAR EL TIPO DE DATO CON UNA LETRA MAYUSCULA)

T = TIPO DE DATO GENERICO
E = ELEMENTO COMUN EN COLECCIONES
K = CLAVE EN MAPAS
V = VALOR EN MAPAS
N = NUMERO
S = REPRESENTA SEGUNDO TIPO GENERICO, EJEMPLO Public class Par<T, S>
R = REPRESENTA EL TIPO DE DATO QUE SE DEVUELVE, EJEMPLO Public class Par<T, R>
U = REPRESENTA TERCER TIPO DE DATO QUE SE DEVUELVE, EJEMPLO Public class Par<T, R, U>

 */